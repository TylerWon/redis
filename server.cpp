#include <vector>
#include <string>
#include <map>
#include <stdexcept>
#include <format>
#include <cstring>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#include <deque>
#include <poll.h>
#include <fcntl.h>

#include "net_utils.hpp"
#include "log.hpp"
#include "constants.hpp"
#include "Request.hpp"
#include "buf_utils.hpp"
#include "responses/Response.hpp"
#include "responses/NilResponse.hpp"
#include "responses/StrResponse.hpp"
#include "responses/IntResponse.hpp"
#include "responses/ErrResponse.hpp"
#include "Buffer.hpp"
#include "hashmap/HMap.hpp"

typedef struct Entry {
    HNode node;
    std::string key;
    std::string val;
} Entry;

typedef struct LookupEntry {
    HNode node;
    std::string key;
} LookupEntry;

struct Conn {
    int fd = -1;
    // application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    Buffer incoming = Buffer();  // data to be parsed by the application
    Buffer outgoing = Buffer();  // responses generated by the application
};

HMap kv_store; // key-value store
std::vector<Conn *> fd_to_conn; // map of all client connections, indexed by fd
std::vector<struct pollfd> pollfds; // array of pollfds for poll()

/**
 * Gets the address info for the machine running this program which can be used in bind().
 * 
 * @return  Pointer to a struct addrinfo on success. Should be freed when no longer in use.
 *          NULL on error.
 */
struct addrinfo *get_my_addr_info() {
    struct addrinfo *res;
    struct addrinfo hints;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;        // IPv4 or IPv6
    hints.ai_socktype = SOCK_STREAM;    // Stream socket
    hints.ai_flags = AI_PASSIVE;        // Returns wildcard address

    if (getaddrinfo(NULL, PORT, &hints, &res) != 0) {
        return NULL;
    }

    return res;
}

/**
 * Starts the server by creating a listener socket bound to a pre-defined port. 
 * 
 * @param res   Pointer to a struct addrinfo containing the addrinfo for the server.
 * 
 * @return  The listener socket on success.
 *          -1 on error.
 */
int start_server(struct addrinfo *res) {
    struct addrinfo *p;
    int listener;
    for (p = res; p != NULL; p = p->ai_next) {
        if ((listener = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
            perror("socket()");
            continue;
        }

        int yes = 1;
        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));  // Allows port to be re-used

        if (bind(listener, p->ai_addr, p->ai_addrlen) == -1) {
            perror("bind()");
            close(listener);
            continue;
        }

        if (listen(listener, SOMAXCONN) == -1) {
            perror("listen()");
            close(listener);
            continue;
        }

        return listener;
    }

    return -1;
}

/**
 * Hashes a string using the FNV-1 hashing algorithm.
 * 
 * Reference: https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function#FNV-1_hash
 * 
 * @param str   The string to hash.
 * 
 * @return  The FNV-1 hash value of the string.
 */
uint64_t str_hash(const std::string &str) {
    uint64_t hash = 0xcbf29ce484222325;
    for (const uint8_t c : str) {
        hash *= 0x100000001b3;
        hash ^= c;
    }
    return hash;
}

/**
 * Checks if two Entries are equal.
 * 
 * @param node1 The HNode contained by the first entry.
 * @param node2 The HNode contained by the second entry.
 * 
 * @return  True if the Entries are equal.
 *          False if not. 
 */
bool are_entries_equal(HNode *node1, HNode *node2) {
    Entry *entry1 = container_of(node1, Entry, node);
    Entry *entry2 = container_of(node2, Entry, node);
    return entry1->key == entry2->key;
}

/**
 * Gets the entry for the provided key in the kv store.
 * 
 * @param key   The key to obtain.
 * 
 * @return  The hashtable Entry corresponding to the key if it is found.
 *          NULL if the key is not found.
 */
Entry *do_get(const std::string &key) {
    LookupEntry lookup_entry;
    lookup_entry.key = key;
    lookup_entry.node.hval = str_hash(key);
    
    HNode *node = kv_store.lookup(&lookup_entry.node, are_entries_equal);
    if (node == NULL) {
        return NULL;
    }

    return container_of(node, Entry, node);
}

/**
 * Sets the value of the provided key in the kv store. If key already exists, updates its value.
 * 
 * @param key   The key to set.
 * @param value The value for the key.
 */
void do_set(const std::string &key, const std::string &value) {
    LookupEntry lookup_entry;
    lookup_entry.key = key;
    lookup_entry.node.hval = str_hash(key);

    HNode *node = kv_store.lookup(&lookup_entry.node, are_entries_equal);
    if (node != NULL) {
        Entry *entry = container_of(node, Entry, node);
        entry->val = value;
    } else {
        Entry *entry = new Entry();
        entry->key = key;
        entry->val = value;
        entry->node.hval = str_hash(key);
        kv_store.insert(&entry->node);
    }
}

/**
 * Deletes the entry for the provided key in the kv store.
 * 
 * @param key   The key to delete.
 * 
 * @return  1 if the key is deleted.
 *          0 if the key does not exist in the kv store.
 */
uint8_t do_del(const std::string &key) {
    LookupEntry lookup_entry;
    lookup_entry.key = key;
    lookup_entry.node.hval = str_hash(key);
    
    HNode *node = kv_store.remove(&lookup_entry.node, are_entries_equal);
    if (node != NULL) {
        delete container_of(node, Entry, node);
        return 1;
    }

    return 0;
}

/**
 * Executes the command in the Request.
 * 
 * There are three commands supported:
 * 1. get [key]
 * 2. set [key] [value]
 * 3. del [key]
 * 
 * @param request   Pointer to the Request.
 * 
 * @return  Pointer to the Response for executing the command.
 */
Response *execute_command(Request *request) {
    Response *response;
    std::vector<std::string> &command = request->command;

    if (command.size() == 2 && command[0] == "get") {
        Entry *entry = do_get(command[1]);
        if (entry != NULL) {
            response = new StrResponse(entry->val);
        } else {
            response = new NilResponse();
        }
    } else if (command.size() == 3 && command[0] == "set") {
        do_set(command[1], command[2]);
        response = new StrResponse("OK");
    } else if (command.size() == 2 && command[0] == "del") {
        uint8_t result = do_del(command[1]);
        response = new IntResponse(result);
    } else {
        response = new ErrResponse(ErrResponse::ErrorCode::ERR_UNKNOWN, "unknown command");
    }

    log(response->to_string().data());

    return response;
}

/**
 * Initializes the pollfds array from the map of open connections (fd_to_conn).
 */
void init_pollfds(int listener) {
    // reset from last event loop
    pollfds.clear();
    
    struct pollfd pfd = {listener, POLLIN, 0};
    pollfds.push_back(pfd);

    for (Conn *conn : fd_to_conn) {
        // conn set to NULL when connection is terminated
        if (conn == NULL) {
            continue;
        }

        pfd = {conn->fd, 0, 0};
        if (conn->want_read) {
            pfd.events |= POLLIN;
        }

        if (conn->want_write) {
            pfd.events |= POLLOUT;
        }

        pollfds.push_back(pfd);
    }
}

/** 
 * Sets a socket so that it is non-blocking.
 * 
 * @param fd    The socket to update.
 * 
 * @return  True on success.
 *          False on error.
 */
bool set_non_blocking(int fd) {
    // get current socket flags
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }

    // Add the O_NONBLOCK flag
    flags |= O_NONBLOCK;

    // update socket flags
    int result = fcntl(fd, F_SETFL, flags);
    if (result == -1) {
        return false;
    }

    return true;
}

/**
 * Handles a new connection on the listener socket.
 * 
 * @param listener  The listener socket.
 */
void handle_new_connection(int listener) {
    int client = accept(listener, NULL, NULL);
    if (client == -1) {
        log("failed to accept new connection");
        return;
    }

    if (!set_non_blocking(client)) {
        log("failed to set socket to non-blocking");
        close(client);
        return;
    }

    Conn *conn = new Conn();
    conn->fd = client;
    conn->want_read = true;

    if (fd_to_conn.size() < (uint32_t) conn->fd) {
        fd_to_conn.resize(conn->fd + 1);
    }
    fd_to_conn[conn->fd] = conn;
}

/**
 * Receives data from the connection and stores it in the connection's input buffer.
 * 
 * @param conn  The connection to receive data from.
 * 
 * @return  True on success.
 *          False on error.
 */
bool recv_data(Conn *conn) {
    char buf[64 * 1024]; // 64 KB, large size is to handle pipelined requests
    int recvd = recv(conn->fd, buf, sizeof(buf), 0);
    if (recvd == -1 && errno == EAGAIN) {
        log("connection %d not actually ready to receive", conn->fd);
        return false;
    } else if (recvd < 0) {
        log("unexpected error when receiving data for connection %d", conn->fd);
        return false;
    } else if (recvd == 0) {
        if (conn->incoming.size() == 0) {
            log("peer terminated connection %d", conn->fd);
        } else {
            log("peer terminated connection %d unexpectedly", conn->fd);
        }
        conn->want_close = true;
        return false;
    }

    conn->incoming.append(buf, (uint32_t) recvd);

    return true;
}

/**
 * Tries to parse a request from the connectionâ€™s input buffer. Removes the request from the buffer if it is able to 
 * parse one.
 * 
 * @param conn  The connection to parse the request from.
 * 
 * @return  Pointer to the Request on success.
 *          NULL if request cannot be parsed.
 */
Request *parse_request(Conn *conn) {
    Request *request;
    Request::DeserializationStatus status = Request::deserialize(conn->incoming.data(), conn->incoming.size(), &request);
    if (status == Request::DeserializationStatus::INCOMPLETE_REQ) {
        return NULL;
    } else if (status == Request::DeserializationStatus::REQ_TOO_LARGE) {
        log("request in connection %d's buffer exceeds the size limit");
        conn->want_close = true;
        return NULL;
    }

    conn->incoming.consume(Request::REQ_LEN_HEADER_SIZE + request->length());

    return request;
}

/**
 * Handles when data is ready to be sent on the connection.
 * 
 * @param conn  The connection to send data over.
 */
void handle_send(Conn *conn) {
    int sent = send(conn->fd, conn->outgoing.data(), conn->outgoing.size(), 0);
    if (sent == -1 && errno == EAGAIN) {
        log("connection %d not actually ready to send", conn->fd);
        return;
    } else if (sent < 0) {
        log("unexpected error when sending on connection %d", conn->fd);
        conn->want_close = true;
        return;
    } 

    conn->outgoing.consume((uint32_t) sent);

    if (conn->outgoing.size() == 0) {
        // nothing left to send for connection, change state from write to read 
        conn->want_read = true;
        conn->want_write = false;
    }
}

/**
 * Handles when data is ready to be received on the connection.
 * 
 * @param conn  The connection with data ready to be received.
 */
void handle_recv(Conn *conn) {
    if (!recv_data(conn)) {
        log("couldn't receive data on connection %d", conn->fd);
        return;
    }

    while (Request *request = parse_request(conn)) {
        log("connection: %d, request: %s", conn->fd, request->to_string().data());

        Response *response = execute_command(request);
        if (response->marshal(conn->outgoing) == Response::MarshalStatus::RES_TOO_BIG) {
            log("response to connection %d exceeds the size limit", conn->fd);

            delete response;
            response = new ErrResponse(ErrResponse::ErrorCode::ERR_TOO_BIG, "response is too big");
            response->marshal(conn->outgoing);

            conn->want_close = true;
            delete response;

            return;
        }

        delete request;
        delete response;
    }

    if (conn->outgoing.size() > 0) {
        // something to send for connection, change state from read to write
        conn->want_read = false;
        conn->want_write = true;
        handle_send(conn); // The socket is likely ready to write in a request-response protocol, try to write it 
                           // without waiting for the next iteration
    }
}

/**
 * Handles when the connection should be closed.
 * 
 * @param conn  The connection to close.
 */
void handle_close(Conn *conn) {
    int fd = conn->fd;

    close(conn->fd);
    fd_to_conn[conn->fd] = NULL;
    delete conn;

    log("closed connection %d", fd);
}

int main() {
    struct addrinfo *res = get_my_addr_info();
    if (res == NULL) {
        fatal("failed to get server's addrinfo");
    }

    int listener;
    if ((listener = start_server(res)) == -1) {
        fatal("failed to start server");
    }

    log("started server");

    while (true) {
        init_pollfds(listener);

        if (poll(pollfds.data(), pollfds.size(), -1) == -1) {
            fatal("failed to poll");
        }

        // listener socket always at index 0 of pollfds
        if (pollfds[0].revents & POLLIN) {
            handle_new_connection(listener);
        }

        for (uint32_t i = 1; i < pollfds.size(); i++) {
            Conn *conn = fd_to_conn[pollfds[i].fd];
            uint16_t revents = pollfds[i].revents;
            
            if (revents & POLLIN) {
                handle_recv(conn);
            }

            if (revents & POLLOUT) {
                handle_send(conn);
            }

            if (revents & POLLERR || conn->want_close) {
                handle_close(conn);
            }
        }
    }
}
