#include <vector>
#include <string>
#include <map>
#include <stdexcept>
#include <format>
#include <cstring>
#include <sys/socket.h>
#include <netdb.h>
#include <unistd.h>
#include <deque>
#include <poll.h>
#include <fcntl.h>

#include "net_utils.hpp"
#include "log.hpp"
#include "constants.hpp"
#include "Request.hpp"
#include "buf_utils.hpp"
#include "Response.hpp"
#include "Buffer.hpp"

struct Conn {
    int fd = -1;
    // application's intention, for the event loop
    bool want_read = false;
    bool want_write = false;
    bool want_close = false;
    // buffered input and output
    Buffer incoming = Buffer();  // data to be parsed by the application
    Buffer outgoing = Buffer();  // responses generated by the application
};

std::map<std::string, std::string> kv_store; // key-value store
std::vector<Conn *> fd_to_conn; // map of all client connections, indexed by fd
std::vector<struct pollfd> pollfds; // array of pollfds for poll()

/**
 * Gets the address info for the server which can be used in bind().
 * 
 * @return  Pointer to a struct addrinfo on success. Should be freed when no longer in use.
 *          NULL on error.
 */
struct addrinfo *get_server_addr_info() {
    struct addrinfo *res;
    struct addrinfo hints;

    memset(&hints, 0, sizeof(hints));
    hints.ai_family = AF_UNSPEC;        // IPv4 or IPv6
    hints.ai_socktype = SOCK_STREAM;    // Stream socket
    hints.ai_flags = AI_PASSIVE;        // Returns wildcard address

    if (getaddrinfo(NULL, PORT, &hints, &res) != 0) {
        return NULL;
    }

    return res;
}

/**
 * Starts the server by creating a listener socket bound to a pre-defined port. 
 * 
 * @param res   Pointer to a struct addrinfo containing the addrinfo for the server.
 * 
 * @return  The listener socket on success.
 *          -1 on error.
 */
int start_server(struct addrinfo *res) {
    struct addrinfo *p;
    int listener;
    for (p = res; p != NULL; p = p->ai_next) {
        if ((listener = socket(p->ai_family, p->ai_socktype, p->ai_protocol)) == -1) {
            perror("socket()");
            continue;
        }

        int yes = 1;
        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));  // Allows port to be re-used

        if (bind(listener, p->ai_addr, p->ai_addrlen) == -1) {
            perror("bind()");
            close(listener);
            continue;
        }

        if (listen(listener, SOMAXCONN) == -1) {
            perror("listen()");
            close(listener);
            continue;
        }

        return listener;
    }

    return -1;
}

/**
 * Executes the command in the Request.
 * 
 * There are three commands supported:
 * 1. get [key] - get the value of [key] in the kv store
 * 2. set [key] [value] - set the value of [key] to [value] in the kv store
 * 3. del [key] - delete [key] from the kv store
 * 
 * @param request   Pointer to the Request.
 * 
 * @return  The Response for executing the command.
 */
Response execute_command(Request *request) {
    Response response(Response::ResponseStatus::RES_OK, "");
    std::vector<std::string> &command = request->command;

    if (command.size() == 2 && command[0] == "get") {
        try {
            std::string value = kv_store.at(command[1]);
            response.message = std::format("got value '{}' for key '{}'", command[1], value);
        } catch (std::out_of_range &e) {
            response.status = Response::ResponseStatus::RES_NX;           
            response.message = std::format("key '{}' does not exist", command[1]);
        }
    } else if (command.size() == 3 && command[0] == "set") {
        kv_store[command[1]].swap(command[2]);
        response.message = std::format("set key '{}' to value '{}'", command[1], kv_store[command[1]]);
    } else if (command.size() == 2 && command[0] == "del") {
        kv_store.erase(command[1]);
        response.message = std::format("removed key '{}'", command[1]);
    } else {
        response.status = Response::ResponseStatus::RES_ERR;
        response.message = std::format("'{}' is not a valid command", request->to_string());
    }

    log(response.message.data());

    return response;
}

/**
 * Initializes the pollfds array from the map of open connections (fd_to_conn).
 */
void init_pollfds(int listener) {
    // reset from last event loop
    pollfds.clear();
    
    struct pollfd pfd = {listener, POLLIN, 0};
    pollfds.push_back(pfd);

    for (Conn *conn : fd_to_conn) {
        // conn set to NULL when connection is terminated
        if (conn == NULL) {
            continue;
        }

        pfd = {conn->fd, 0, 0};
        if (conn->want_read) {
            pfd.events |= POLLIN;
        }

        if (conn->want_write) {
            pfd.events |= POLLOUT;
        }

        pollfds.push_back(pfd);
    }
}

/** 
 * Sets a socket so that it is non-blocking.
 * 
 * @param fd    The socket to update.
 * 
 * @return  True on success.
 *          False on error.
 */
bool set_non_blocking(int fd) {
    // get current socket flags
    int flags = fcntl(fd, F_GETFL, 0);
    if (flags == -1) {
        return false;
    }

    // Add the O_NONBLOCK flag
    flags |= O_NONBLOCK;

    // update socket flags
    int result = fcntl(fd, F_SETFL, flags);
    if (result == -1) {
        return false;
    }

    return true;
}

/**
 * Handles a new connection on the listener socket.
 * 
 * @param listener  The listener socket.
 */
void handle_new_connection(int listener) {
    int client = accept(listener, NULL, NULL);
    if (client == -1) {
        log("failed to accept new connection");
        return;
    }

    if (!set_non_blocking(client)) {
        log("failed to set socket to non-blocking");
        close(client);
        return;
    }

    Conn *conn = new Conn();
    conn->fd = client;
    conn->want_read = true;

    if (fd_to_conn.size() < (uint32_t) conn->fd) {
        fd_to_conn.resize(conn->fd + 1);
    }
    fd_to_conn[conn->fd] = conn;
}

/**
 * Receives data from the connection and stores it in the connection's input buffer.
 * 
 * @param conn  The connection to receive data from.
 * 
 * @return  True on success.
 *          False on error.
 */
bool recv_data(Conn *conn) {
    char buf[64 * 1024]; // 64 KB, large size is to handle pipelined requests
    int recvd = recv(conn->fd, buf, sizeof(buf), 0);
    if (recvd == -1 && errno == EAGAIN) {
        log("connection %d not actually ready to receive", conn->fd);
        return false;
    } else if (recvd < 0) {
        log("unexpected error when receiving data for connection %d", conn->fd);
        return false;
    } else if (recvd == 0) {
        if (conn->incoming.size() == 0) {
            log("peer terminated connection %d", conn->fd);
        } else {
            log("peer terminated connection %d unexpectedly", conn->fd);
        }
        conn->want_close = true;
        return false;
    }

    conn->incoming.append(buf, (uint32_t) recvd);

    return true;
}

/**
 * Tries to parse a request from the connectionâ€™s input buffer. Removes the request from the buffer if it is able to 
 * parse one.
 * 
 * @param conn  The connection to parse the request from.
 * 
 * @return  Pointer to the Request on success.
 *          NULL if request cannot be parsed.
 */
Request *parse_request(Conn *conn) {
    Request *request;
    Request::DeserializationStatus status = Request::deserialize(conn->incoming.data(), conn->incoming.size(), &request);
    if (status == Request::DeserializationStatus::INCOMPLETE_REQ) {
        return NULL;
    } else if (status == Request::DeserializationStatus::REQ_TOO_LARGE) {
        log("request in connection %d's buffer exceeds the size limit");
        conn->want_close = true;
        return NULL;
    }

    conn->incoming.consume(Request::REQ_LEN_HEADER_SIZE + request->length());

    return request;
}

/**
 * Handles when data is ready to be sent on the connection.
 * 
 * @param conn  The connection to send data over.
 */
void handle_send(Conn *conn) {
    int sent = send(conn->fd, conn->outgoing.data(), conn->outgoing.size(), 0);
    if (sent == -1 && errno == EAGAIN) {
        log("connection %d not actually ready to send", conn->fd);
        return;
    } else if (sent < 0) {
        log("unexpected error when sending on connection %d", conn->fd);
        conn->want_close = true;
        return;
    } 

    conn->outgoing.consume((uint32_t) sent);

    if (conn->outgoing.size() == 0) {
        // nothing left to send for connection, change state from write to read 
        conn->want_read = true;
        conn->want_write = false;
    }
}

/**
 * Handles when data is ready to be received on the connection.
 * 
 * @param conn  The connection with data ready to be received.
 */
void handle_recv(Conn *conn) {
    if (!recv_data(conn)) {
        log("couldn't receive data on connection %d", conn->fd);
        return;
    }

    while (Request *request = parse_request(conn)) {
        Response response = execute_command(request);
        
        char *buf;
        uint32_t buf_len;
        response.serialize(&buf, &buf_len);
        if (buf == NULL) {
            log("response to connection %d exceeds the size limit", conn->fd);
            conn->want_close = true;
            return;
        }
        conn->outgoing.append(buf, buf_len);

        delete request;
        free(buf);
    }

    if (conn->outgoing.size() > 0) {
        // something to send for connection, change state from read to write
        conn->want_read = false;
        conn->want_write = true;
        handle_send(conn); // The socket is likely ready to write in a request-response protocol, try to write it 
                           // without waiting for the next iteration
    }
}

/**
 * Handles when the connection should be closed.
 * 
 * @param conn  The connection to close.
 */
void handle_close(Conn *conn) {
    int fd = conn->fd;

    close(conn->fd);
    fd_to_conn[conn->fd] = NULL;
    delete conn;

    log("closed connection %d", fd);
}

int main() {
    struct addrinfo *res = get_server_addr_info();
    if (res == NULL) {
        fatal("failed to get server's addrinfo");
    }

    int listener;
    if ((listener = start_server(res)) == -1) {
        fatal("failed to start server");
    }

    log("started server");

    while (true) {
        init_pollfds(listener);

        if (poll(pollfds.data(), pollfds.size(), -1) == -1) {
            fatal("failed to poll");
        }

        // listener socket always at index 0 of pollfds
        if (pollfds[0].revents & POLLIN) {
            handle_new_connection(listener);
        }

        for (uint32_t i = 1; i < pollfds.size(); i++) {
            Conn *conn = fd_to_conn[pollfds[i].fd];
            uint16_t revents = pollfds[i].revents;
            
            if (revents & POLLIN) {
                handle_recv(conn);
            }

            if (revents & POLLOUT) {
                handle_send(conn);
            }

            if (revents & POLLERR || conn->want_close) {
                handle_close(conn);
            }
        }
    }
}
